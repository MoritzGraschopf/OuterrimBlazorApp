@page "/"
@rendermode InteractiveServer
@using Domain.Interfaces
@using Model.Entities

@inject IRepository<Aircraft> AircraftsRepository
@inject IRepository<AircraftSpecification> AircraftSpecificationsRepository

<h1>Aircrafts</h1>
<br>

<PageTitle>Aircrafts</PageTitle>

<h3>Create</h3>

<form id="create">
    <div class="form-group row my-2">
        <label for="fuel_c" class="col-sm-2 col-form-label">Fuel</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="fuel_c" aria-describedby="fuel_c" @bind-value="_newAircraft.Fuel"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="speed_c" class="col-sm-2 col-form-label">Speed</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="speed_c" aria-describedby="speed_c" @bind-value="_newAircraft.Speed"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="altitude_c" class="col-sm-2 col-form-label">Altitude</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="altitude_c" aria-describedby="altitude_c" @bind-value="_newAircraft.Altitude"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="name_c" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="name_c" aria-describedby="name_c" @bind-value="_newAircraft.Name"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="specificationId_c" class="col-sm-2 col-form-label">Specification Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="specificationId_c" aria-describedby="specificationId_c" @bind-value="_newAircraft.SpecificationId"/>
        </div>
    </div>
</form>
<button class="btn btn-primary mt-2" @onclick="async () => await AddAircraft()">Submit</button>
@if (_createError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_createError
    </div>
}

<hr/>

<h3>Read</h3>
<table class="table">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">Fuel</th>
        <th scope="col">Speed</th>
        <th scope="col">Altitude</th>
        <th scope="col">Name</th>
        <th scope="col">Specification Id</th>
    </tr>
    </thead>
    <tbody>
    @if (AircraftsList is not null)
    {
        @foreach (var aircraft in AircraftsList)
        {
            <tr>
                <th scope="row">@aircraft.Id</th>
                <td>@aircraft.Fuel</td>
                <td>@aircraft.Speed</td>
                <td>@aircraft.Altitude</td>
                <td>@aircraft.Name</td>
                <td>@aircraft.SpecificationId</td>
            </tr>
        }
    }
    </tbody>
</table>

<hr/>

<h3>Update</h3>

<form id="update">
    <div class="form-group row my-2">
        <label for="id_u" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_u" aria-describedby="id_u" @bind-value="_updateId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="fuel_u" class="col-sm-2 col-form-label">Fuel</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="fuel_u" aria-describedby="fuel_u" @bind-value="_newUpdateAircraft.Fuel"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="speed_u" class="col-sm-2 col-form-label">Speed</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="speed_u" aria-describedby="speed_u" @bind-value="_newUpdateAircraft.Speed"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="altitude_u" class="col-sm-2 col-form-label">Altitude</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="altitude_u" aria-describedby="altitude_u" @bind-value="_newUpdateAircraft.Altitude"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="name_u" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="name_u" aria-describedby="name_u" @bind-value="_newUpdateAircraft.Name"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="specificationId_u" class="col-sm-2 col-form-label">Specification Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="specificationId_u" aria-describedby="specificationId_u" @bind-value="_newUpdateAircraft.SpecificationId"/>
        </div>
    </div>
</form>
<button class="btn btn-primary my-2" @onclick="async () => await UpdateAircraft()">Submit</button>
@if (_updateError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_updateError
    </div>
}

<hr>

<h3>Delete</h3>

<form id="delete">
    <div class="form-group row my-2">
        <label for="id_d" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_d" aria-describedby="id_d" @bind-value="_deleteId"/>
        </div>
    </div>
</form>
<button class="btn btn-primary my-2" @onclick="async () => await DeleteAircraft()">Submit</button>
@if (_deleteError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_deleteError
    </div>
}

@code {
    private List<Aircraft>? AircraftsList { get; set; }
    private Aircraft _newAircraft = new Aircraft();
    private string _createError = "";

    private int _updateId = 0;
    private Aircraft _newUpdateAircraft = new Aircraft();
    private string _updateError = "";

    private int _deleteId = 0;
    private string _deleteError = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AircraftsList = await AircraftsRepository.ReadAllAsync();
    }

    private async Task AddAircraft()
    {
        try
        {
            if (_newAircraft.Name == "") throw new Exception("Name cannot be empty");
            if (await AircraftSpecificationsRepository.ReadAsync(_newAircraft.SpecificationId) is null) throw new Exception($"Aircraft Specification with Id {_newAircraft.SpecificationId} does not Exist");
            await AircraftsRepository.CreateAsync(_newAircraft);
            AircraftsList = await AircraftsRepository.ReadAllAsync(); // Liste aktualisieren
            _newAircraft = new Aircraft(); // Formular zurücksetzen
            _createError = "";
        }
        catch (Exception ex)
        {
            _createError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAircraft()
    {
        try
        {
            if (_newUpdateAircraft.Name == "") throw new Exception("Name cannot be empty");
            if (await AircraftSpecificationsRepository.ReadAsync(_newUpdateAircraft.SpecificationId) is null) throw new Exception($"Aircraft Specification with Id {_newUpdateAircraft.SpecificationId} does not Exist");
            _newUpdateAircraft.Id = _updateId;
            await AircraftsRepository.UpdateAsync(_updateId, _newUpdateAircraft);
            AircraftsList = await AircraftsRepository.ReadAllAsync(); // Liste aktualisieren
            _newUpdateAircraft = new Aircraft(); // Formular zurücksetzen
            _updateId = 0;
            _updateError = "";
        }
        catch (Exception ex)
        {
            _updateError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteAircraft()
    {
        try
        {
            await AircraftsRepository.DeleteAsync(_deleteId);
            AircraftsList = await AircraftsRepository.ReadAllAsync();
            _deleteId = 0;
            _deleteError = "";
        }
        catch (Exception e)
        {
            _deleteError = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}