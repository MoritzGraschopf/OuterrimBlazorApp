@page "/AircraftCrews"
@rendermode InteractiveServer
@using Domain.Interfaces
@using Model.Entities

@inject IRepository<AircraftCrew> AircraftCrewRepository
@inject IRepository<Aircraft> AircraftsRepository
@inject IRepository<Mercenary> MercenariesRepository

<h1>Aircraft Crews</h1>
<br>
<PageTitle>Aircraft Crews</PageTitle>

<h3>Create</h3>

<form id="create">
    <div class="form-group row my-2">
        <label for="aircraftid_c" class="col-sm-2 col-form-label">Aircraft Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="aircraftid_c" aria-describedby="aircraftid_c" @bind-value="_newAircraftCrew.AircraftId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="mercenaryid_c" class="col-sm-2 col-form-label">Mercenary Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="mercenaryid_c" aria-describedby="mercenaryid_c" @bind-value="_newAircraftCrew.MercenaryId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="joinedat_c" class="col-sm-2 col-form-label">Joined At</label>
        <div class="col-sm-10">
            <input type="date" class="form-control" id="joinedat_c" aria-describedby="joinedat_c" @bind-value="_newAircraftCrew.JoinedAt"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary my-2" @onclick="async () => await AddAircraftCrew()">Submit</button>
@if (_createError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_createError
    </div>
}

<hr>

<h3>Read</h3>
<table class="table">
    <thead>
    <tr>
        <th scope="col">Aircraft Id</th>
        <th scope="col">Mercenary Id</th>
        <th scope="col">Joined At</th>
    </tr>
    </thead>
    <tbody>
    @if (AircraftCrewList is not null)
    {
        @foreach (var aircraftCrew in AircraftCrewList)
        {
            <tr>
                <td>@aircraftCrew.AircraftId</td>
                <td>@aircraftCrew.MercenaryId</td>
                <td>@aircraftCrew.JoinedAt.ToString("dd.MM.yyyy")</td>
            </tr>
        }
    }
    </tbody>
</table>

<hr>

<h3>Update</h3>

<form id="update">
    <div class="form-group row my-2">
        <label for="aircraftid_u" class="col-sm-2 col-form-label">Aircraft Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="aircraftid_u" aria-describedby="aircraftid_u" @bind-value="_newUpdateAircraftCrew.AircraftId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="mercenaryid_u" class="col-sm-2 col-form-label">Mercenary Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="mercenaryid_u" aria-describedby="mercenaryid_u" @bind-value="_newUpdateAircraftCrew.MercenaryId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="joinedat_u" class="col-sm-2 col-form-label">Joined At</label>
        <div class="col-sm-10">
            <input type="date" class="form-control" id="joinedat_u" aria-describedby="joinedat_u" @bind-value="_newUpdateAircraftCrew.JoinedAt"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary my-2" @onclick="async () => await UpdateAircraftCrew()">Submit</button>
@if (_updateError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_updateError
    </div>
}

<hr>

<h3>Delete</h3>

<form id="delete">
    <div class="form-group row my-2">
        <label for="aircraftid_d" class="col-sm-2 col-form-label">Aircraft Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="aircraftid_d" aria-describedby="aircraftid_d" @bind-value="_deleteAircraftId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="mercenaryid_d" class="col-sm-2 col-form-label">Mercenary Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="mercenaryid_d" aria-describedby="mercenaryid_d" @bind-value="_deleteMercenaryId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary my-2" @onclick="async () => await DeleteAircraftCrew()">Submit</button>
@if (_deleteError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_deleteError
    </div>
}

@code {
    private List<AircraftCrew>? AircraftCrewList { get; set; }
    private AircraftCrew _newAircraftCrew = new();
    private string _createError = "";

    private AircraftCrew _newUpdateAircraftCrew = new();
    private string _updateError = "";

    private int _deleteAircraftId = 0;
    private int _deleteMercenaryId = 0;
    private string _deleteError = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AircraftCrewList = await AircraftCrewRepository.ReadAllAsync();
    }

    private async Task AddAircraftCrew()
    {
        try
        {
            if (await AircraftsRepository.ReadAsync(_newAircraftCrew.AircraftId) is null) throw new Exception($"Aircraft with Id {_newAircraftCrew.AircraftId} does not Exist");
            if (await MercenariesRepository.ReadAsync(_newAircraftCrew.MercenaryId) is null) throw new Exception($"Mercenary with Id {_newAircraftCrew.MercenaryId} does not Exist");

            await AircraftCrewRepository.CreateAsync(_newAircraftCrew);
            AircraftCrewList = await AircraftCrewRepository.ReadAllAsync(); // Liste aktualisieren
            _newAircraftCrew = new AircraftCrew(); // Formular zurücksetzen
            _createError = "";
        }
        catch (Exception ex)
        {
            _createError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAircraftCrew()
    {
        try
        {
            if (await AircraftsRepository.ReadAsync(_newUpdateAircraftCrew.AircraftId) is null) throw new Exception($"Aircraft with Id {_newAircraftCrew.AircraftId} does not Exist");
            if (await MercenariesRepository.ReadAsync(_newUpdateAircraftCrew.MercenaryId) is null) throw new Exception($"Mercenary with Id {_newAircraftCrew.MercenaryId} does not Exist");

            await AircraftCrewRepository.UpdateAsync([_newUpdateAircraftCrew.AircraftId, _newUpdateAircraftCrew.MercenaryId], _newUpdateAircraftCrew);
            AircraftCrewList = await AircraftCrewRepository.ReadAllAsync(); // Liste aktualisieren
            _newUpdateAircraftCrew = new AircraftCrew(); // Formular zurücksetzen
            _updateError = "";
        }
        catch (Exception ex)
        {
            _updateError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteAircraftCrew()
    {
        try
        {
            await AircraftCrewRepository.DeleteAsync([_deleteAircraftId, _deleteMercenaryId]);
            AircraftCrewList = await AircraftCrewRepository.ReadAllAsync();
            _deleteAircraftId = 0;
            _deleteMercenaryId = 0;
            _deleteError = "";
        }
        catch (Exception e)
        {
            _deleteError = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}