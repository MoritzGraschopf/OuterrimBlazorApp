@page "/Mercenaries"
@rendermode InteractiveServer
@using Domain.Interfaces
@using Model.Entities

@inject IRepository<Mercenary> MercenariesRepository

<h1>Mercenaries</h1>
<br>
<PageTitle>Mercenaries</PageTitle>

<h3>Create</h3>

<form id="create">
    <div class="form-group row my-2">
        <label for="firstname_c" class="col-sm-2 col-form-label">First Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="firstname_c" aria-describedby="firstname_c" @bind-value="@_newMercenary.FirstName"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="lastname_c" class="col-sm-2 col-form-label">Last Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="lastname_c" aria-describedby="lastname_c" @bind-value="@_newMercenary.LastName"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="bodyskills_c" class="col-sm-2 col-form-label">Body Skills</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="bodyskills_c" aria-describedby="bodyskills_c" @bind-value="@_newMercenary.BodySkills"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="combatskills_c" class="col-sm-2 col-form-label">Combat Skills</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="combatskills_c" aria-describedby="combatskills_c" @bind-value="@_newMercenary.CombatSkills"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await AddMercenary()">Submit</button>
@if (_createError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_createError
    </div>
}

<hr/>

<h3>Read</h3>
<table class="table">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">First Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Body Skills</th>
        <th scope="col">Combat Skills</th>
    </tr>
    </thead>
    <tbody>
    @if (MercenariesList is not null)
    {
        @foreach (var mercenary in MercenariesList)
        {
            <tr>
                <th scope="row">@mercenary.Id</th>
                <td>@mercenary.FirstName</td>
                <td>@mercenary.LastName</td>
                <td>@mercenary.BodySkills</td>
                <td>@mercenary.CombatSkills</td>
            </tr>
        }
    }
    </tbody>
</table>

<hr>

<h3>Update</h3>

<form id="update">
    <div class="form-group row my-2">
        <label for="id_u" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_u" aria-describedby="id_u" @bind-value="@_updateId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="firstname_u" class="col-sm-2 col-form-label">First Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="firstname_u" aria-describedby="firstname_u" @bind-value="@_newUpdateMercenary.FirstName"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="lastname_u" class="col-sm-2 col-form-label">Last Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="lastname_u" aria-describedby="lastname_u" @bind-value="@_newUpdateMercenary.LastName"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="bodyskills_u" class="col-sm-2 col-form-label">Body Skills</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="bodyskills_u" aria-describedby="bodyskills_u" @bind-value="@_newUpdateMercenary.BodySkills"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="combatskills_u" class="col-sm-2 col-form-label">Combat Skills</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="combatskills_u" aria-describedby="combatskills_u" @bind-value="@_newUpdateMercenary.CombatSkills"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await UpdateMercenary()">Submit</button>
@if (_updateError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_updateError
    </div>
}

<hr/>

<h3>Delete</h3>

<form id="delete">
    <div class="form-group row my-2">
        <label for="id_d" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_d" aria-describedby="id_d" @bind-value="@_deleteId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await DeleteMercenary()">Submit</button>
@if (_deleteError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_deleteError
    </div>
}

@code {
    private List<Mercenary>? MercenariesList { get; set; }

    private Mercenary _newMercenary = new Mercenary();
    private string _createError = "";

    private int _updateId = 0;
    private Mercenary _newUpdateMercenary = new Mercenary();
    private string _updateError = "";

    private int _deleteId = 0;
    private string _deleteError = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MercenariesList = await MercenariesRepository.ReadAllAsync();
    }

    private async Task AddMercenary()
    {
        try
        {
            if (_newMercenary.FirstName == "") throw new Exception("First Name cannot be empty");
            if (_newMercenary.LastName == "") throw new Exception("Last Name cannot be empty");
            await MercenariesRepository.CreateAsync(_newMercenary);
            MercenariesList = await MercenariesRepository.ReadAllAsync(); // Liste aktualisieren
            _newMercenary = new Mercenary(); // Formular zurücksetzen
            _createError = "";
        }
        catch (Exception ex)
        {
            _createError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateMercenary()
    {
        try
        {
            if (_newUpdateMercenary.FirstName == "") throw new Exception("First Name cannot be empty");
            if (_newUpdateMercenary.LastName == "") throw new Exception("Last Name cannot be empty");
            _newUpdateMercenary.Id = _updateId;
            await MercenariesRepository.UpdateAsync(_updateId, _newUpdateMercenary);
            MercenariesList = await MercenariesRepository.ReadAllAsync(); // Liste aktualisieren
            _newUpdateMercenary = new Mercenary(); // Formular zurücksetzen
            _updateId = 0;
            _updateError = "";
        }
        catch (Exception ex)
        {
            _updateError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteMercenary()
    {
        try
        {
            await MercenariesRepository.DeleteAsync(_deleteId);
            MercenariesList = await MercenariesRepository.ReadAllAsync();
            _deleteId = 0;
            _deleteError = "";
        }
        catch (Exception e)
        {
            _deleteError = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}