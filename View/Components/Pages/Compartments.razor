@page "/Compartments"
@rendermode InteractiveServer
@using Domain.Interfaces
@using Model.Entities

@inject IRepository<Compartment> CompartmentsRepository
@inject IRepository<Aircraft> AircraftRepository

<h1>Compartments</h1>
<br>

<PageTitle>Compartments</PageTitle>

<h3>Create</h3>

<form id="create">
    <div class="form-group row my-2">
        <label for="aircraftid_c" class="col-sm-2 col-form-label">Aircraft Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="aircraftid_c" aria-describedby="aircraftid_c" @bind-value="_newCompartment.AircraftId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await AddCompartment()">Submit</button>
@if (_createError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_createError
    </div>
}

<hr/>

<h3>Read</h3>
<table class="table">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">Aircraft Id</th>
    </tr>
    </thead>
    <tbody>
    @if (CompartmentsList is not null)
    {
        @foreach (var compartment in CompartmentsList)
        {
            <tr>
                <th scope="row">@compartment.Id</th>
                <td>@compartment.AircraftId</td>
            </tr>
        }
    }
    </tbody>
</table>

<hr>

<h3>Update</h3>

<form id="update">
    <div class="form-group row my-2">
        <label for="id_u" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_u" aria-describedby="id_u" @bind-value="_updateId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="aircraftid_u" class="col-sm-2 col-form-label">Aircraft Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="aircraftid_u" aria-describedby="aircraftid_u" @bind-value="_newUpdateCompartment.AircraftId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await UpdateCompartment()">Submit</button>
@if (_updateError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_updateError
    </div>
}

<hr/>

<h3>Delete</h3>

<form id="delete">
    <div class="form-group row my-2">
        <label for="id_d" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_d" aria-describedby="id_d" @bind-value="_deleteId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await DeleteCompartment()">Submit</button>
@if (_deleteError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_deleteError
    </div>
}

@code {
    private List<Compartment>? CompartmentsList { get; set; }

    private Compartment _newCompartment = new Compartment();
    private string _createError = "";

    private int _updateId = 0;
    private Compartment _newUpdateCompartment = new Compartment();
    private string _updateError = "";

    private int _deleteId = 0;
    private string _deleteError = "";
    
    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        CompartmentsList = await CompartmentsRepository.ReadAllAsync();
    }

    private async Task AddCompartment()
    {
        try
        {
            if (await AircraftRepository.ReadAsync(_newCompartment.AircraftId) is null) throw new Exception($"Aircraft with Id {_newCompartment.AircraftId} does not Exist");
            await CompartmentsRepository.CreateAsync(_newCompartment);
            CompartmentsList = await CompartmentsRepository.ReadAllAsync(); // Liste aktualisieren
            _newCompartment = new Compartment(); // Formular zurücksetzen
            _createError = "";
        }
        catch (Exception ex)
        {
            _createError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateCompartment()
    {
        try
        {
            if (await AircraftRepository.ReadAsync(_newUpdateCompartment.AircraftId) is null) throw new Exception($"Aircraft with Id {_newUpdateCompartment.AircraftId} does not Exist");
            _newUpdateCompartment.Id = _updateId;
            await CompartmentsRepository.UpdateAsync(_updateId, _newUpdateCompartment);
            CompartmentsList = await CompartmentsRepository.ReadAllAsync(); // Liste aktualisieren
            _newUpdateCompartment = new Compartment(); // Formular zurücksetzen
            _updateId = 0;
            _updateError = "";
        }
        catch (Exception ex)
        {
            _updateError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteCompartment()
    {
        try
        {
            await CompartmentsRepository.DeleteAsync(_deleteId);
            CompartmentsList = await CompartmentsRepository.ReadAllAsync();
            _deleteId = 0;
            _deleteError = "";
        }
        catch (Exception e)
        {
            _deleteError = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}