@page "/CrimeSyndicates"
@using Domain.Interfaces
@using Model.Entities

@inject IRepository<CrimeSyndicate> CrimeSyndicatesRepository

<h1>Crime Syndicates</h1>
<br>
<PageTitle>Crime Syndicates</PageTitle>

<h3>Create</h3>

<form id="create">
    <div class="form-group row my-2">
        <label for="name_c" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="name_c" aria-describedby="name_c"
                   @bind-value="@_newCrimeSyndicate.Name"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="location_c" class="col-sm-2 col-form-label">Location</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="location_c" aria-describedby="location_c"
                   @bind-value="@_newCrimeSyndicate.Location"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await AddCrimeSyndicate()">Submit</button>
@if (_createError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_createError
    </div>
}

<hr/>

<h3>Read</h3>
<table class="table">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">Name</th>
        <th scope="col">Location</th>
    </tr>
    </thead>
    <tbody>
    @if (CrimeSyndicatesList is not null)
    {
        @foreach (var crimeSyndicate in CrimeSyndicatesList)
        {
            <tr>
                <th scope="row">@crimeSyndicate.Id</th>
                <td>@crimeSyndicate.Name</td>
                <td>@crimeSyndicate.Location</td>
            </tr>
        }
    }
    </tbody>
</table>

<hr>

<h3>Update</h3>

<form id="update">
    <div class="form-group row my-2">
        <label for="id_u" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_u" aria-describedby="id_u" @bind-value="@_updateId"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="name_u" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="name_u" aria-describedby="name_u" @bind-value="@_newUpdateCrimeSyndicate.Name"/>
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="location_u" class="col-sm-2 col-form-label">Location</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="location_u" aria-describedby="location_u" @bind-value="@_newUpdateCrimeSyndicate.Location"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await UpdateCrimeSyndicate()">Submit</button>
@if (_updateError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_updateError
    </div>
}

<hr/>

<h3>Delete</h3>

<form id="delete">
    <div class="form-group row my-2">
        <label for="id_d" class="col-sm-2 col-form-label">Id</label>
        <div class="col-sm-10">
            <input type="number" class="form-control" id="id_d" aria-describedby="id_d" @bind-value="_deleteId"/>
        </div>
    </div>
</form>
<button type="submit" class="btn btn-primary mt-2" @onclick="async () => await DeleteCrimeSyndicate()">Submit</button>
@if (_deleteError != "")
{
    <div class="alert alert-danger my-2" role="alert">
        @_deleteError
    </div>
}

@code {
    private List<CrimeSyndicate>? CrimeSyndicatesList { get; set; }

    private CrimeSyndicate _newCrimeSyndicate = new CrimeSyndicate();
    private string _createError = "";

    private int _updateId = 0;
    private CrimeSyndicate _newUpdateCrimeSyndicate = new CrimeSyndicate();
    private string _updateError = "";

    private int _deleteId = 0;
    private string _deleteError = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CrimeSyndicatesList = await CrimeSyndicatesRepository.ReadAllAsync();
    }

    private async Task AddCrimeSyndicate()
    {
        try
        {
            if (_newCrimeSyndicate.Name == "") throw new Exception("Name cannot be empty");
            if (_newCrimeSyndicate.Location == "") throw new Exception("Location cannot be empty");
            await CrimeSyndicatesRepository.CreateAsync(_newCrimeSyndicate);
            CrimeSyndicatesList = await CrimeSyndicatesRepository.ReadAllAsync(); // Liste aktualisieren
            _newCrimeSyndicate = new CrimeSyndicate(); // Formular zurücksetzen
            _createError = "";
        }
        catch (Exception ex)
        {
            _createError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateCrimeSyndicate()
    {
        try
        {
            if (_newCrimeSyndicate.Name == "") throw new Exception("Name cannot be empty");
            if (_newCrimeSyndicate.Location == "") throw new Exception("Location cannot be empty");
            _newUpdateCrimeSyndicate.Id = _updateId;
            await CrimeSyndicatesRepository.UpdateAsync(_updateId, _newUpdateCrimeSyndicate);
            CrimeSyndicatesList = await CrimeSyndicatesRepository.ReadAllAsync(); // Liste aktualisieren
            _newUpdateCrimeSyndicate = new CrimeSyndicate(); // Formular zurücksetzen
            _updateId = 0;
            _updateError = "";
        }
        catch (Exception ex)
        {
            _updateError = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteCrimeSyndicate()
    {
        try
        {
            await CrimeSyndicatesRepository.DeleteAsync(_deleteId);
            CrimeSyndicatesList = await CrimeSyndicatesRepository.ReadAllAsync();
            _deleteId = 0;
            _deleteError = "";
        }
        catch (Exception e)
        {
            _deleteError = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}